// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql"
  url      = env("DATABASE_URL")
}

// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql"
  url      = env("DATABASE_URL")
}

model Customer {
  id              Int        @id @default(autoincrement())
  name            String
  email           String     @unique
  password        String
  phone           String
  address         String?
  vehicles        Vehicle[]
  bookings        Booking[]
  serviceReports  Report[]
  feedback        Feedback[]
  createdAt       DateTime   @default(now())
}

model Worker {
  id              Int        @id @default(autoincrement())
  name            String
  email           String     @unique
  password        String
  position        String
  phone           String?
  services        Service[]
  serviceReports  Report[]
  createdAt       DateTime   @default(now())
}

model Manager {
  id              Int        @id @default(autoincrement())
  name            String
  email           String     @unique
  password        String
  phone           String?
  reports         Report[]
  finances        Finance[]
  createdAt       DateTime   @default(now())
}

model Service {
  id              Int        @id @default(autoincrement())
  bookingId       Int
  workerId        Int?
  serviceStatus   String     @default("Pending")
  repairNotes     String?
  serviceCost     Float?
  spareParts      String?
  completionDate  DateTime?
  booking         Booking    @relation(fields: [bookingId], references: [id])
  worker          Worker?    @relation(fields: [workerId], references: [id])
}

model Vehicle {
  id              Int        @id @default(autoincrement())
  customerId      Int
  model           String
  registrationNumber String
  year            Int?
  type            String?
  customer        Customer   @relation(fields: [customerId], references: [id])
  service         Service
}

model Booking {
  id              Int        @id @default(autoincrement())
  customerId      Int
  vehicleId       Int
  bookingDate     DateTime
  status          String     @default("Pending")
  reportedIssue   String?
  estimatedCost   Float?
  confirmed       Boolean    @default(false)
  customer        Customer   @relation(fields: [customerId], references: [id])
  vehicle         Vehicle    @relation(fields: [vehicleId], references: [id])
  service         Service?
}

model Stock {
  id              Int        @id @default(autoincrement())
  itemName        String
  category        String?
  quantity        Int        @default(0)
  unitPrice       Float?
  updatedAt       DateTime   @default(now())
}

model Report {
  id              Int        @id @default(autoincrement())
  type            String
  date            DateTime   @default(now())
  details         String?
  customerId      Int?
  workerId        Int?
  managerId       Int?
  customer        Customer?  @relation(fields: [customerId], references: [id])
  worker          Worker?    @relation(fields: [workerId], references: [id])
  manager         Manager?   @relation(fields: [managerId], references: [id])
}

model Finance {
  id              Int        @id @default(autoincrement())
  managerId       Int
  amount          Float
  category        String
  date            DateTime   @default(now())
  notes           String?
  manager         Manager    @relation(fields: [managerId], references: [id])
}

model Feedback {
  id              Int        @id @default(autoincrement())
  customerId      Int
  rating          Int
  comment         String?
  date            DateTime   @default(now())
  customer        Customer   @relation(fields: [customerId], references: [id])
}